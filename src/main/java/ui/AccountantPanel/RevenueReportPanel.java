/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.AccountantPanel;

import Business.EcoSystem;
import Business.WorkRequest.FinancialUpdateRequest;
import Business.WorkRequest.FoodOrderRequest;
import Business.WorkRequest.TicketingRequest;
import Business.CartItem;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import java.util.stream.Collectors;
import ui.GradientPanel;


/**
 *
 * @author ushakeshravyacopy
 */
public class RevenueReportPanel extends GradientPanel {
     private final JPanel workarea;
     private final EcoSystem system;
    /**
     * Creates new form RevenueReportPanel
     */
    public RevenueReportPanel(JPanel workarea, EcoSystem system) {
        super(
            new Color[] {
                new Color(173, 216, 230),  // Light Sky Blue
                new Color(245, 245, 245),  // Powder White
                new Color(152, 251, 152)   // Mint Green
            },
            new float[] { 0f, 0.5f, 1f }
        );
        this.workarea = workarea;
        this.system   = system;
        initComponents();
        chartPanel.setLayout(new java.awt.BorderLayout());
        chartPanel.setPreferredSize(new Dimension(500, 300));

        populateTicketRevenueTable();
    populateFoodRevenueTable();

    }
    
    private void populateTicketRevenueTable() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);  // Clear previous data

    Map<String, Integer> ticketCountMap = new HashMap<>();

    for (TicketingRequest req : system.getTicketingRequests()) {
        if (!"Issued".equals(req.getStatus())) continue;

        String showName = req.getMovieTitle();
        int tickets = req.getNumTickets();

        ticketCountMap.put(showName, ticketCountMap.getOrDefault(showName, 0) + tickets);
    }

    for (Map.Entry<String, Integer> entry : ticketCountMap.entrySet()) {
        String show = entry.getKey();
        int count = entry.getValue();
        double revenue = count * 10.0;

        model.addRow(new Object[] { show, count, String.format("%.2f", revenue) });
    }
}


    private void populateFoodRevenueTable() {
    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
    model.setRowCount(0);  // Clear previous data

    for (FoodOrderRequest fr : system.getFoodOrderRequests()) {
        if (!"Placed".equalsIgnoreCase(fr.getStatus()) && !"Processed".equalsIgnoreCase(fr.getStatus()))
            continue;

        String customer = fr.getSender().getName();
        List<CartItem> items = fr.getCartItems();
        
        if (items == null || items.isEmpty()) continue;

        // Create comma-separated item summary
        String itemNames = items.stream()
                                .map(item -> item.getFoodName() + " x" + item.getQuantity())
                                .collect(Collectors.joining(", "));

        // Calculate total (unitPrice * quantity)
        int total = items.stream().mapToInt(CartItem::getPrice).sum();




        model.addRow(new Object[] { customer, itemNames, String.format("%.2f", (double) total) });
    }
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblRevenueReportPanel = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnGeneratePieChart = new javax.swing.JButton();
        btnGenerateBarChart = new javax.swing.JButton();
        lblTicketRevenueTable = new javax.swing.JLabel();
        lblFoodRevenueTable = new javax.swing.JLabel();
        chartPanel = new javax.swing.JPanel();

        lblRevenueReportPanel.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblRevenueReportPanel.setText(" ðŸ“Š Revenue Report Panel ");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Show Name ", "Tickets Sold", "Revenue ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer", "Items", "Total Spent ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
        }

        btnGeneratePieChart.setText("Generate Pie Chart");
        btnGeneratePieChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneratePieChartActionPerformed(evt);
            }
        });

        btnGenerateBarChart.setText("Generate Bar Chart");
        btnGenerateBarChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateBarChartActionPerformed(evt);
            }
        });

        lblTicketRevenueTable.setText(" Ticket Revenue Table ");

        lblFoodRevenueTable.setText("Food Revenue Table ");

        javax.swing.GroupLayout chartPanelLayout = new javax.swing.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 304, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 142, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblRevenueReportPanel)
                .addGap(153, 153, 153))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnGeneratePieChart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnGenerateBarChart))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(lblTicketRevenueTable)))
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblFoodRevenueTable)
                        .addGap(201, 201, 201))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(chartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRevenueReportPanel)
                    .addComponent(btnBack))
                .addGap(25, 25, 25)
                .addComponent(lblTicketRevenueTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFoodRevenueTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGeneratePieChart)
                    .addComponent(btnGenerateBarChart))
                .addGap(29, 29, 29)
                .addComponent(chartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workarea.remove(this);
        ((CardLayout)workarea.getLayout()).previous(workarea);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnGenerateBarChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateBarChartActionPerformed
        // TODO add your handling code here:
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    for (int i = 0; i < jTable1.getRowCount(); i++) {
        String show = jTable1.getValueAt(i, 0).toString();
        double revenue = Double.parseDouble(jTable1.getValueAt(i, 2).toString());
        dataset.addValue(revenue, "Revenue ($)", show);
    }

    JFreeChart chart = ChartFactory.createBarChart(
        "Ticket Revenue by Show",
        "Show Name",
        "Revenue ($)",
        dataset
    );

    ChartPanel cp = new ChartPanel(chart);
    chartPanel.removeAll();
    chartPanel.add(cp, BorderLayout.CENTER); // this line is critical
    chartPanel.revalidate();  // triggers layout update
    chartPanel.repaint(); 
    this.revalidate();
this.repaint();
    System.out.println("Bar chart rows: " + jTable1.getRowCount());


    }//GEN-LAST:event_btnGenerateBarChartActionPerformed

    private void btnGeneratePieChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneratePieChartActionPerformed
        // TODO add your handling code here:
             DefaultPieDataset dataset = new DefaultPieDataset();

    for (int i = 0; i < jTable2.getRowCount(); i++) {
        String customer = jTable2.getValueAt(i, 0).toString();
        double totalSpent = Double.parseDouble(jTable2.getValueAt(i, 2).toString());
        dataset.setValue(customer, totalSpent);
        
    }

    JFreeChart chart = ChartFactory.createPieChart(
        "Food Revenue by Customer",
        dataset,
        true, true, false
    );

    ChartPanel cp = new ChartPanel(chart);
    chartPanel.removeAll();
    chartPanel.add(cp, BorderLayout.CENTER); // same here
    chartPanel.revalidate();
    chartPanel.repaint();
    this.revalidate();
this.repaint();

    System.out.println("Pie chart rows: " + jTable2.getRowCount());
    }//GEN-LAST:event_btnGeneratePieChartActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnGenerateBarChart;
    private javax.swing.JButton btnGeneratePieChart;
    private javax.swing.JPanel chartPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblFoodRevenueTable;
    private javax.swing.JLabel lblRevenueReportPanel;
    private javax.swing.JLabel lblTicketRevenueTable;
    // End of variables declaration//GEN-END:variables
}
