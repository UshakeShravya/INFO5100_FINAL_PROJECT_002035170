/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.TicketSellerPanel;

import Business.EcoSystem;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.TicketBookingRequest;
import Business.WorkRequest.TicketingRequest;
import Utils.EmailNotificationService;
import jakarta.mail.MessagingException;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import ui.GradientPanel;
import ui.AccountantPanel.AccountantDashboardPanel;


/**
 *
 * @author ushakeshravya
 */
public class BookingRequestsPanel extends GradientPanel {
    private final JPanel workarea;
    private final EcoSystem system;
    private final UserAccount user;

    /**
     * Creates new form BookingRequestsPanel
     */
    public BookingRequestsPanel(JPanel workarea, EcoSystem system, UserAccount user) {
         super(
            new Color[] {
                new Color(192, 192, 192),  // Silver
                new Color(64, 64, 64),     // Charcoal
                new Color(0, 255, 255)     // Neon Cyan
            },
            new float[] { 0f, 0.5f, 1f }
        ); 
        this.workarea = workarea;
        this.system   = system;
        this.user     = user;
        initComponents();
         populateTable();
    }
    
     private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblBookingRequests.getModel();
        model.setRowCount(0);
        List<TicketBookingRequest> list = system.getTicketBookingRequests();
        for (TicketBookingRequest r : list) {
            model.addRow(new Object[] {
                r.getShowName(),
                r.getSeats(),
                r.getCustomer(),
                r.getStatus()
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblBookingRequests = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBookingRequests = new javax.swing.JTable();
        btnConfirm = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        lblBookingRequests.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblBookingRequests.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBookingRequests.setText("Booking Requests");

        tblBookingRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Show Name", "Seats", "Customer", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblBookingRequests);
        if (tblBookingRequests.getColumnModel().getColumnCount() > 0) {
            tblBookingRequests.getColumnModel().getColumn(0).setResizable(false);
            tblBookingRequests.getColumnModel().getColumn(1).setResizable(false);
            tblBookingRequests.getColumnModel().getColumn(2).setResizable(false);
            tblBookingRequests.getColumnModel().getColumn(3).setResizable(false);
        }

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(btnConfirm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReject)
                .addGap(113, 113, 113))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblBookingRequests)
                .addGap(189, 189, 189))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(lblBookingRequests))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnBack)))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm)
                    .addComponent(btnReject))
                .addGap(100, 100, 100))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        int row = tblBookingRequests.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Select a row first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        TicketBookingRequest r = system.getTicketBookingRequests().get(row);
        if (r.getStatus().equals("Confirmed") || r.getStatus().equals("Rejected")) {

            JOptionPane.showMessageDialog(this, "Already processed.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // 1) mark it “Confirmed”
        r.setStatus("Confirmed");

        // 2) create a TicketingRequest for the accountant pipeline
         //    (populate fields using your TicketingRequest constructor)
        //    We’ll put showName into movieTitle, leave showTime empty (or reuse same string)
        String customer    = r.getCustomer();
        String movieTitle  = r.getShowName();
        String showTime    = "";               // optional: split movieTitle if you want
        int seats = r.getSeats().split(",").length;
        
        TicketingRequest tReq = new TicketingRequest(
             customer,    // customerName
    movieTitle,  // movieTitle
    showTime,    // showTime
    seats 
        );
        system.addTicketingRequest(tReq);
        // Refresh AccountantDashboardPanel if it's in memory
        for (Component comp : workarea.getComponents()) {
    if (comp instanceof ui.AccountantPanel.AccountantDashboardPanel) {
        ((AccountantDashboardPanel) comp).populateTable();

    }
}
        
        // 3) Send a confirmation email to the single address that the customer entered:
    String toEmail = r.getCustomerEmail(); 
    if (toEmail != null && !toEmail.isEmpty()) {
        try {
            EmailNotificationService.sendBookingConfirmationEmail(
                toEmail,
                r.getCustomer(),   // the customer’s username
                r.getShowName(),
                seats
            );
        } catch (MessagingException ex) {
            JOptionPane.showMessageDialog(
                this,
                "Failed to send confirmation e-mail:\n" + ex.getMessage(),
                "Email Error",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }

        JOptionPane.showMessageDialog(this, "Booking confirmed and sent to Ticketing queue.", 
                                      "Success", JOptionPane.INFORMATION_MESSAGE);
    

        populateTable();
    
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
         int row = tblBookingRequests.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Select a row first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        TicketBookingRequest r = system.getTicketBookingRequests().get(row);
        r.setStatus("Rejected");
        JOptionPane.showMessageDialog(this, "Booking request rejected.", "Info", JOptionPane.INFORMATION_MESSAGE);
        populateTable();
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workarea.remove(this);
        ((CardLayout)workarea.getLayout()).previous(workarea);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnReject;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBookingRequests;
    private javax.swing.JTable tblBookingRequests;
    // End of variables declaration//GEN-END:variables
}
